* Getting Started

  Port of [[https://www.orgroam.com/][Org-roam]] to neovim using [[https://github.com/nvim-orgmode/orgmode][nvim-orgmode]].

** Installation

   This plugin depends on [[https://github.com/nvim-orgmode/orgmode][nvim-orgmode/orgmode]] @ [[4874e72ab434c440e955b7bc4d9a2df884370137][commit 4874e72]].

*** lazy.nvim

    #+begin_src lua
    {
      "chipsenkbeil/org-roam.nvim",
      dependencies = { 
        { 
          "nvim-orgmode/orgmode", 
          commit = "4874e72ab434c440e955b7bc4d9a2df884370137",
        },
      },
      config = function()
        require("org-roam").setup({
          directory = "~/orgfiles",
        })
      end
    }
    #+end_src

*** packer.nvim

    #+begin_src lua
    use {
      "chipsenkbeil/org-roam.nvim",
      requires = { 
        { 
          "nvim-orgmode/orgmode",
          commit = "4874e72ab434c440e955b7bc4d9a2df884370137",
        },
      },
      config = function()
        require("org-roam"):setup({
          directory = "~/orgfiles",
        })
      end
    }
    #+end_src

* Configuration

** directory

   Path to the directory containing org files for use with org-roam.

   Takes a string representing the path to the directory, which can
   can contain =~= that will expand to your home directory.

   #+begin_src lua
   require("org-roam"):setup({
     directory = "~/orgfiles",
   })
   #+end_src

** bindings

   Configuration settings used to specify keybindings.

*** capture
 
    Opens a roam capture window.
 
    Takes a string representing the keybinding. Defaults to =<Leader>nc=.
 
    #+begin_src lua
    require("org-roam"):setup({
      bindings = {
        capture = "<LocalLeader>nc",
      },
    })
    #+end_src
 
*** complete_at_point
 
    Completes the node under cursor by searching for a node with matching title
    or alias. If exactly one match is found, the text under cursor is replaced
    with the link; otherwise, a selection dialog pops up to pick the node.
 
    Takes a string representing the keybinding. Defaults to =<Leader>n.=.
 
    #+begin_src lua
    require("org-roam"):setup({
      bindings = {
        complete_at_point = "<LocalLeader>n.",
      },
    })
    #+end_src
 
*** find_node
 
    Finds a node by title or alias and opens it in the current window.
 
    If the node does not exist, opens a capture buffer for the new node
    using the title.
 
    Takes a string representing the keybinding. Defaults to =<Leader>nf=.
 
    #+begin_src lua
    require("org-roam"):setup({
      bindings = {
        find_node = "<LocalLeader>nf",
      },
    })
    #+end_src
 
*** insert_node
 
    Inserts a link at cursor position to a node by title or alias.
 
    If the node does not exist, opens a capture buffer for the new node
    using the title.
 
    Takes a string representing the keybinding. Defaults to =<Leader>ni=.
 
    #+begin_src lua
    require("org-roam"):setup({
      bindings = {
        insert_node = "<LocalLeader>ni",
      },
    })
    #+end_src
 
*** insert_node_immediate
 
    Inserts a link at cursor position to a node by title or alias. Unlike
    =insert_node=, this does not open a capture buffer if a new node is created.
 
    Takes a string representing the keybinding. Defaults to =<Leader>nm=.
 
    #+begin_src lua
    require("org-roam"):setup({
      bindings = {
        insert_node_immediate = "<LocalLeader>nm",
      },
    })
    #+end_src
 
*** quickfix_backlinks
 
    Opens the quickfix list, populating it with backlinks for the node
    under cursor.
 
    Takes a string representing the keybinding. Defaults to =<Leader>nq=.
 
    #+begin_src lua
    require("org-roam"):setup({
      bindings = {
        quickfix_backlinks = "<LocalLeader>nq",
      },
    })
    #+end_src
 
*** toggle_roam_buffer
 
    Opens the roam buffer for the node under cursor, updating the buffer
    when the cursor moves to a different node. See the user interface
    [[#org-roam-buffer][Org Roam Buffer]] section for details.
 
    Takes a string representing the keybinding. Defaults to =<Leader>nl=.
 
    #+begin_src lua
    require("org-roam"):setup({
      bindings = {
        toggle_roam_buffer = "<LocalLeader>nl",
      },
    })
    #+end_src
 
*** toggle_roam_buffer_fixed
 
    Opens the roam buffer for a specific node, and will not change as the
    cursor moves across nodes. See the user interface
    [[#org-roam-buffer][Org Roam Buffer]] section for details.
 
    Takes a string representing the keybinding. Defaults to =<Leader>nb=.
 
    #+begin_src lua
    require("org-roam"):setup({
      bindings = {
        toggle_roam_buffer_fixed = "<LocalLeader>nb",
      },
    })
    #+end_src

** database

   Configuration settings tied to the roam database.

*** path
 
    Sets the path where the roam database will be stored & loaded when
    persisting to disk.
 
    Takes a string representing the path. Defaults to 
    For example, =~/.local/share/nvim/org-roam.nvim/db=.
 
    #+begin_src lua
    require("org-roam"):setup({
      database = {
        path = "~/some/path/to/db",
      },
    })
    #+end_src
 
*** persist
 
    If true, the database will be written to disk to save on future loading
    times; otherwise, whenever neovim boots the entire database will need to be
    rebuilt.
 
    Takes a boolean. Defaults to =true=.
 
    #+begin_src lua
    require("org-roam"):setup({
      database = {
        persist = false,
      },
    })
    #+end_src
 
*** update_on_save
 
    If true, updates database whenever a write occurs. If you have large files,
    it is recommended to disable this option and manually update using the vim
    command =OrgRoamUpdate=.
 
    Takes a boolean. Defaults to =true=.
 
    #+begin_src lua
    require("org-roam"):setup({
      database = {
        update_on_save = false,
      },
    })
    #+end_src

** immediate

   Configuration settings tied to immediate mode.

*** target
    
    Target where the immediate-mode node should be written.
 
    Takes a string. Defaults to =%r%[sep]%<%Y%m%d%H%M%S>-%[slug].org=.
 
    #+begin_src lua
    require("org-roam"):setup({
      immediate = {
        target = "%r%[sep]%[slug].org",
      },
    })
    #+end_src
 
*** template
    
    Template to use for the immediate-mode node's content.
 
    Takes a string. Defaults to ==.
 
    #+begin_src lua
    require("org-roam"):setup({
      immediate = {
        template = "The date is %<%Y%m%d>!",
      },
    })
    #+end_src
 
** templates

   A map of templates associated with roam. These have the exact same format
   as =nvim-orgmode='s templates, but include additional variables and are
   only displayed and used during roam's capture dialog.

   Takes a =table<string, table>=.
   Defaults to the following:

   #+begin_src lua
   require("org-roam"):setup({
     templates = {
       d = {
         description = "default",
         template = "%?",
         target = "%r%[sep]%<%Y%m%d%H%M%S>-%[slug].org",
       },
     },
   })
   #+end_src

   Variables:

   - =%r=:  Prints the roam directory.
   - =%R=:  Like =%r=, but inserts the full path.

   Target-only Variables:

   - =%[sep]=:    Prints the path separator for the current operating system.
   - =%[slug]=:   Prints a slug representing the node's title.
   - =%[title]=:  Prints the node's title.

** ui

   Configuration settings tied to the user interface.

*** mouse

    Bindings tied specifically to mouse interaction in org buffers.

**** click_open_links
     
     If true, clicking on links will open them.
  
     Takes a boolean. Defaults to =true=.
  
     #+begin_src lua
     require("org-roam"):setup({
       ui = {
         mouse = {
           click_open_links = false,
         },
       },
     })
     #+end_src
  
**** highlight_links
     
     If true, highlights links when mousing over them.
     
     This will enable =vim.opt.mouseoverevent= if disabled!
  
     Takes a boolean. Defaults to =true=.
  
     #+begin_src lua
     require("org-roam"):setup({
       ui = {
         mouse = {
           highlight_links = false,
         },
       },
     })
     #+end_src
  
**** highlight_links_group
     
     Highlight group to apply when highlighting links.
  
     Takes a string. Defaults to =WarningMsg=.
  
     #+begin_src lua
     require("org-roam"):setup({
       ui = {
         mouse = {
           highlight_links_group = "Comment",
         },
       },
     })
     #+end_src

*** node_view

    Bindings tied specifically to the roam buffer.

**** highlight_previews
     
     If true, previews will be highlighted as org syntax when expanded.
  
     NOTE: This can cause flickering on initial expansion, but preview
           highlights are then cached for future renderings. If flickering
           is undesired, disable highlight previews.
  
     Takes a boolean. Defaults to =true=.
  
     #+begin_src lua
     require("org-roam"):setup({
       ui = {
         node_view = {
           highlight_previews = false,
         },
       },
     })
     #+end_src
  
**** show_keybindings
     
     If true, will include a section covering available keybindings.
  
     Takes a boolean. Defaults to =true=.
  
     #+begin_src lua
     require("org-roam"):setup({
       ui = {
         node_view = {
           show_keybindings = false,
         },
       },
     })
     #+end_src
  
**** unique
     
     If true, shows a single link (backlink/citation/unlinked
     reference) per node instead of all links.
  
     Takes a boolean. Defaults to =false=.
  
     #+begin_src lua
     require("org-roam"):setup({
       ui = {
         node_view = {
           unique = true,
         },
       },
     })
     #+end_src
  
* Bindings

  | Name                     | Keybinding   | Description                                                             |
  |--------------------------+--------------+-------------------------------------------------------------------------|
  | capture                  | =<Leader>nc= | Opens org-roam capture window.                                          |
  | complete_at_point        | =<Leader>n.= | Completes the node under cursor.                                        |
  | find_node                | =<Leader>nf= | Finds node and moves to it, creating it if it does not exist.           |
  | insert_node              | =<Leader>ni= | Inserts node at cursor position, creating it if it does not exist.      |
  | insert_node_immediate    | =<Leader>nm= | Same as =insert_node=, but skips opening capture buffer.                |
  | quickfix_backlinks       | =<Leader>nq= | Opens the quickfix menu for backlinks to the current node under cursor. |
  | toggle_roam_buffer       | =<Leader>nl= | Toggles the org-roam node-view buffer for the node under cursor.        |
  | toggle_roam_buffer_fixed | =<Leader>nb= | Toggles a fixed org-roam node-view buffer for a selected node.          |

** Modifying bindings

  Bindings can be changed during configuration by overwriting them within the =bindings= table:

  #+begin_src lua
  require("org-roam"):setup({
    -- ...
    bindings = {
      capture = "<LocalLeader>nc",
    },
  })
  #+end_src

  To disable all bindings, set the =bindings= field to =false=:

  #+begin_src lua
  require("org-roam"):setup({
    -- ...
    bindings = false,
  })
  #+end_src

** Coming from Emacs

   Want to have bindings similar to Emacs's [[https://www.orgroam.com/][Org Roam]]?
   Here is a recommended setup you can use to leverage =C-c=

   #+begin_src lua
   require("org-roam"):setup({
     bindings = {
       capture                  = "<C-c>nc",
       complete_at_point        = "<M-/>",
       find_node                = "<C-c>nf",
       insert_node              = "<C-c>ni",
       insert_node_immediate    = "<C-c>nm",
       quickfix_backlinks       = "<C-c>nq",
       toggle_roam_buffer       = "<C-c>nl",
       toggle_roam_buffer_fixed = "<C-c>nb",
     },
   })
   #+end_src

   Keep in mind that [[https://github.com/nvim-orgmode/orgmode][nvim-orgmode]] maps =C-c= to
   closing a capture window, so you'll want to rebind it:

   #+begin_src lua
   -- Override `org_capture_finalize` mapping to make org-roam mappings work in capture window
   require("orgmode").setup({
     mappings = {
       capture = {
         -- Behave like Emacs' orgmode capture
         org_capture_finalize = "<C-c><C-c>",
       }
     }
   })
   #+end_src

* User Interface

** Org Roam Buffer

   When within the org-roam buffer, you can navigate around like normal with a
   couple of specific bindings available:

   - Press =<Enter>= on a link to navigate to it in another window.
   - Press =<Tab>= to expand or collapse a preview of the content of a
     backlink, reference link, or unlinked reference.

* API

  TODO

* Changelog

  TODO

* Credits

  - [[https://github.com/kristijanhusak][Kristijan Husak]] for creating [[https://github.com/nvim-orgmode/orgmode][nvim-orgmode]] (the backbone of functionality in neovim that we leverage)
  - [[https://github.com/jethrokuan][Jethro Kuan]] for creating [[https://github.com/org-roam/org-roam][Org Roam (Emacs)]] (the original implementation whose design we copied)
  - [[https://github.com/minad][Daniel Mendler]] for creating [[https://github.com/minad/vertico][vertico.el]] (inspiration for ourg selection dialog)
  - [[https://github.com/s1n7ax][Srinesh Nisala]] for creating [[https://github.com/s1n7ax/nvim-window-picker][nvim-window-picker]] (integrated directly for our window selection)
  - [[https://github.com/kdheepak][Dheepak Krishnamurthy]] for creating [[https://github.com/kdheepak/panvimdoc][panvimdoc]] (used to create our vimdoc)
